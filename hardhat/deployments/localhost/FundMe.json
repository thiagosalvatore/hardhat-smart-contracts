{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__CallFailed",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "FundMe__NotEnoughEth",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getVersion",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0xfe83bada6885c74967dfacddab9799b0040c274e5e52e2b5d310f8ea99befd7b",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "920827",
        "logsBloom": "0x
        "blockHash": "0xd0cb6b7c8cbde0bd457b8deeac5279d79436b1788a9f5264227dac034b571574",
        "transactionHash": "0xfe83bada6885c74967dfacddab9799b0040c274e5e52e2b5d310f8ea99befd7b",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "920827",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "1ab3d9700d126ac29efc91056200282e",
    "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotEnoughEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Thiago Salvatore\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\nerror FundMe__NotEnoughEth();\\nerror FundMe__CallFailed();\\n\\n/** @title A contract for crowd funding\\n *   @author Thiago Salvatore\\n *   @notice This contract is to demo a sample funding contract\\n *   @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     *   @notice This function funds this contract\\n     */\\n    function fund() public payable {\\n        if (msg.value.getConversionRate(s_priceFeed) < MINIMUM_USD)\\n            revert FundMe__NotEnoughEth();\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        if (!callSuccess) revert FundMe__CallFailed();\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xbdb3bd88f747d4583152e66988bda3660449cf18f3b2d856f041dea9ac27a3ec\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0xf9e3371fe52160d3ba0b74b910892b87969e5c6c3bdd6ffc7ca3164b33b1edb4\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620010bf380380620010bf83398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b608051610f4662000179600039600081816103f4015281816105ea01526106be0152610f466000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101355780639e87a5cd14610160578063b60d42881461018b578063d7b4750c146101955761008e565b80630343fb25146100985780630d8e6e2c146100d55780633ccfd60b146101005780636b69a5921461010a5761008e565b3661008e5761008c6101d2565b005b6100966101d2565b005b3480156100a457600080fd5b506100bf60048036038101906100ba919061093a565b610303565b6040516100cc9190610980565b60405180910390f35b3480156100e157600080fd5b506100ea61034b565b6040516100f79190610980565b60405180910390f35b6101086103f2565b005b34801561011657600080fd5b5061011f6106ad565b60405161012c9190610980565b60405180910390f35b34801561014157600080fd5b5061014a6106ba565b60405161015791906109aa565b60405180910390f35b34801561016c57600080fd5b506101756106e2565b6040516101829190610a24565b60405180910390f35b6101936101d2565b005b3480156101a157600080fd5b506101bc60048036038101906101b79190610a6b565b61070c565b6040516101c991906109aa565b60405180910390f35b6802b5e3af16b1880000610211600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461075490919063ffffffff16565b1015610249576040517f5ed3980900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102979190610ac7565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b557600080fd5b505afa1580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed9190610b32565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610477576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156104fb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104b1575b5050505050905060005b815181101561058557600082828151811061052357610522610b5f565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061057d90610b8e565b915050610505565b50600067ffffffffffffffff8111156105a1576105a0610bd7565b5b6040519080825280602002602001820160405280156105cf5781602001602082028036833780820191505090505b50600190805190602001906105e5929190610830565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161062c90610c37565b60006040518083038185875af1925050503d8060008114610669576040519150601f19603f3d011682016040523d82523d6000602084013e61066e565b606091505b50509050806106a9576040517fa6139a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001828154811061072257610721610b5f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061076083610790565b90506000670de0b6b3a764000085836107799190610c4c565b6107839190610cd5565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156107d957600080fd5b505afa1580156107ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108119190610d7e565b5050509150506402540be400816108289190610df9565b915050919050565b8280548282559060005260206000209081019282156108a9579160200282015b828111156108a85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610850565b5b5090506108b691906108ba565b5090565b5b808211156108d35760008160009055506001016108bb565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610907826108dc565b9050919050565b610917816108fc565b811461092257600080fd5b50565b6000813590506109348161090e565b92915050565b6000602082840312156109505761094f6108d7565b5b600061095e84828501610925565b91505092915050565b6000819050919050565b61097a81610967565b82525050565b60006020820190506109956000830184610971565b92915050565b6109a4816108fc565b82525050565b60006020820190506109bf600083018461099b565b92915050565b6000819050919050565b60006109ea6109e56109e0846108dc565b6109c5565b6108dc565b9050919050565b60006109fc826109cf565b9050919050565b6000610a0e826109f1565b9050919050565b610a1e81610a03565b82525050565b6000602082019050610a396000830184610a15565b92915050565b610a4881610967565b8114610a5357600080fd5b50565b600081359050610a6581610a3f565b92915050565b600060208284031215610a8157610a806108d7565b5b6000610a8f84828501610a56565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ad282610967565b9150610add83610967565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b1257610b11610a98565b5b828201905092915050565b600081519050610b2c81610a3f565b92915050565b600060208284031215610b4857610b476108d7565b5b6000610b5684828501610b1d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610b9982610967565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610bcc57610bcb610a98565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c21600083610c06565b9150610c2c82610c11565b600082019050919050565b6000610c4282610c14565b9150819050919050565b6000610c5782610967565b9150610c6283610967565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c9b57610c9a610a98565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ce082610967565b9150610ceb83610967565b925082610cfb57610cfa610ca6565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d2581610d06565b8114610d3057600080fd5b50565b600081519050610d4281610d1c565b92915050565b6000819050919050565b610d5b81610d48565b8114610d6657600080fd5b50565b600081519050610d7881610d52565b92915050565b600080600080600060a08688031215610d9a57610d996108d7565b5b6000610da888828901610d33565b9550506020610db988828901610d69565b9450506040610dca88828901610b1d565b9350506060610ddb88828901610b1d565b9250506080610dec88828901610d33565b9150509295509295909350565b6000610e0482610d48565b9150610e0f83610d48565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e4e57610e4d610a98565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e8b57610e8a610a98565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ec857610ec7610a98565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f0557610f04610a98565b5b82820290509291505056fea2646970667358221220d59c9665785e05960e981c3606cffe58485bfc0d38cbf462e8cf876e98059d5264736f6c63430008090033",
    "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101355780639e87a5cd14610160578063b60d42881461018b578063d7b4750c146101955761008e565b80630343fb25146100985780630d8e6e2c146100d55780633ccfd60b146101005780636b69a5921461010a5761008e565b3661008e5761008c6101d2565b005b6100966101d2565b005b3480156100a457600080fd5b506100bf60048036038101906100ba919061093a565b610303565b6040516100cc9190610980565b60405180910390f35b3480156100e157600080fd5b506100ea61034b565b6040516100f79190610980565b60405180910390f35b6101086103f2565b005b34801561011657600080fd5b5061011f6106ad565b60405161012c9190610980565b60405180910390f35b34801561014157600080fd5b5061014a6106ba565b60405161015791906109aa565b60405180910390f35b34801561016c57600080fd5b506101756106e2565b6040516101829190610a24565b60405180910390f35b6101936101d2565b005b3480156101a157600080fd5b506101bc60048036038101906101b79190610a6b565b61070c565b6040516101c991906109aa565b60405180910390f35b6802b5e3af16b1880000610211600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461075490919063ffffffff16565b1015610249576040517f5ed3980900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102979190610ac7565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b557600080fd5b505afa1580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed9190610b32565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610477576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156104fb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104b1575b5050505050905060005b815181101561058557600082828151811061052357610522610b5f565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061057d90610b8e565b915050610505565b50600067ffffffffffffffff8111156105a1576105a0610bd7565b5b6040519080825280602002602001820160405280156105cf5781602001602082028036833780820191505090505b50600190805190602001906105e5929190610830565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161062c90610c37565b60006040518083038185875af1925050503d8060008114610669576040519150601f19603f3d011682016040523d82523d6000602084013e61066e565b606091505b50509050806106a9576040517fa6139a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001828154811061072257610721610b5f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061076083610790565b90506000670de0b6b3a764000085836107799190610c4c565b6107839190610cd5565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156107d957600080fd5b505afa1580156107ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108119190610d7e565b5050509150506402540be400816108289190610df9565b915050919050565b8280548282559060005260206000209081019282156108a9579160200282015b828111156108a85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610850565b5b5090506108b691906108ba565b5090565b5b808211156108d35760008160009055506001016108bb565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610907826108dc565b9050919050565b610917816108fc565b811461092257600080fd5b50565b6000813590506109348161090e565b92915050565b6000602082840312156109505761094f6108d7565b5b600061095e84828501610925565b91505092915050565b6000819050919050565b61097a81610967565b82525050565b60006020820190506109956000830184610971565b92915050565b6109a4816108fc565b82525050565b60006020820190506109bf600083018461099b565b92915050565b6000819050919050565b60006109ea6109e56109e0846108dc565b6109c5565b6108dc565b9050919050565b60006109fc826109cf565b9050919050565b6000610a0e826109f1565b9050919050565b610a1e81610a03565b82525050565b6000602082019050610a396000830184610a15565b92915050565b610a4881610967565b8114610a5357600080fd5b50565b600081359050610a6581610a3f565b92915050565b600060208284031215610a8157610a806108d7565b5b6000610a8f84828501610a56565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ad282610967565b9150610add83610967565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b1257610b11610a98565b5b828201905092915050565b600081519050610b2c81610a3f565b92915050565b600060208284031215610b4857610b476108d7565b5b6000610b5684828501610b1d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610b9982610967565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610bcc57610bcb610a98565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c21600083610c06565b9150610c2c82610c11565b600082019050919050565b6000610c4282610c14565b9150819050919050565b6000610c5782610967565b9150610c6283610967565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c9b57610c9a610a98565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ce082610967565b9150610ceb83610967565b925082610cfb57610cfa610ca6565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d2581610d06565b8114610d3057600080fd5b50565b600081519050610d4281610d1c565b92915050565b6000819050919050565b610d5b81610d48565b8114610d6657600080fd5b50565b600081519050610d7881610d52565b92915050565b600080600080600060a08688031215610d9a57610d996108d7565b5b6000610da888828901610d33565b9550506020610db988828901610d69565b9450506040610dca88828901610b1d565b9350506060610ddb88828901610b1d565b9250506080610dec88828901610d33565b9150509295509295909350565b6000610e0482610d48565b9150610e0f83610d48565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e4e57610e4d610a98565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e8b57610e8a610a98565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ec857610ec7610a98565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f0557610f04610a98565b5b82820290509291505056fea2646970667358221220d59c9665785e05960e981c3606cffe58485bfc0d38cbf462e8cf876e98059d5264736f6c63430008090033",
    "devdoc": {
        "author": "Thiago Salvatore",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {},
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function funds this contract"
            }
        },
        "notice": "This contract is to demo a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 63,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 66,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 78,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
